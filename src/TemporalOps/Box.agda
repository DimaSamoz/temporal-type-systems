
{- Box operator. -}
module TemporalOps.Box where

open import CategoryTheory.Categories
open import CategoryTheory.Functor
open import TemporalOps.Common

open import Relation.Binary.PropositionalEquality

-- Function extensionality
postulate
    ext : ‚àÄ{a b} -> Extensionality a b

-- The box operator can be derived as a comonad from an adjunction K ‚ä£ G

K : Functor ùïäet ‚Ñùeactive
K = record
  { omap = Œª A -> (Œª n -> A)
  ; fmap = Œª f -> (Œª n -> Œª x -> f x)
  ; fmap-id = refl
  ; fmap-‚àò = refl
  ; fmap-cong = Œª z ‚Üí z
  }

G : Functor ‚Ñùeactive ùïäet
G = record
  { omap = Œª A -> (‚àÄ(n : ‚Ñï) -> A n)
  ; fmap = Œª f -> Œª a -> (Œª n -> f n (a n))
  ; fmap-id = refl
  ; fmap-‚àò = refl
  ; fmap-cong = Œª pf ‚Üí ext (Œª n ‚Üí pf)
  }

-- Box operator
‚ñ°_ : œÑ -> œÑ
(‚ñ°_ A) n = (n : ‚Ñï) -> A n
infixr 65 ‚ñ°_

-- ‚ñ° instances
instance
    F-‚ñ° : Functor ‚Ñùeactive ‚Ñùeactive
    F-‚ñ° = record
        { omap = ‚ñ°_
        ; fmap = fmap-‚ñ°
        ; fmap-id = refl
        ; fmap-‚àò = refl
        }
        where
        -- Lifting of ‚ñ°
        fmap-‚ñ° : {A B : œÑ} -> A ‚á¥ B -> ‚ñ° A ‚á¥ ‚ñ° B
        fmap-‚ñ° f n a = Œª k ‚Üí f k (a k)

    EF-‚ñ° : Endofunctor ‚Ñùeactive
    EF-‚ñ° = record { functor = F-‚ñ° }
