
-- Semantics of syntactic traversal and substitution
module Semantics.Substitution.Traversal where

open import Syntax.Types
open import Syntax.Context renaming (_,_ to _,,_)
open import Syntax.Terms
open import Syntax.Substitution.Kits
open import Syntax.Substitution.Instances

open import Semantics.Types
open import Semantics.Context
open import Semantics.Select
open import Semantics.Terms
open import Semantics.Substitution.Kits

open import CategoryTheory.Categories using (Category ; ext)
open import CategoryTheory.Functor
open import CategoryTheory.NatTrans
open import CategoryTheory.Monad
open import CategoryTheory.Comonad
open import CategoryTheory.Instances.Reactive renaming (top to ‚ä§)
open import TemporalOps.Diamond
open import TemporalOps.Box
open import TemporalOps.OtherOps

open import Data.Sum
open import Data.Product using (_,_)
open import Relation.Binary.PropositionalEquality as ‚â°
    using (_‚â°_ ; refl ; sym ; trans ; cong ; cong‚ÇÇ ; subst)

open ‚â°.‚â°-Reasoning
private module F-‚ñ° = Functor F-‚ñ°
open Comonad W-‚ñ°

module _ {ùíÆ} {k : Kit ùíÆ} (‚ü¶k‚üß : ‚ü¶Kit‚üß k) where
    open ‚ü¶Kit‚üß ‚ü¶k‚üß
    open Kit k
    open ‚ü¶K‚üß ‚ü¶k‚üß
    open K k

    -- Soundness of syntactic traversal:
    -- Denotation of a term M traversed with substitution œÉ is
    -- the same as the denotation of œÉ followed by the denotation of M
    traverse-sound : ‚àÄ{Œì Œî A} (œÉ : Subst ùíÆ Œì Œî) (M : Œì ‚ä¢ A)
                  -> ‚ü¶ traverse œÉ M ‚üß‚Çò ‚âà ‚ü¶ M ‚üß‚Çò ‚àò ‚ü¶subst‚üß œÉ
    traverse‚Ä≤-sound : ‚àÄ{Œì Œî A} (œÉ : Subst ùíÆ Œì Œî) (C : Œì ‚ä® A)
                  -> ‚ü¶ traverse‚Ä≤ œÉ C ‚üß·µê ‚âà ‚ü¶ C ‚üß·µê ‚àò ‚ü¶subst‚üß œÉ

    traverse-sound ‚óè (var ())
    traverse-sound (œÉ ‚ñ∏ T) (var top) = ‚ü¶ùìâ‚üß T
    traverse-sound (œÉ ‚ñ∏ T) (var (pop x)) = traverse-sound œÉ (var x)
    traverse-sound œÉ (lam {Œì} {A} M) {n} {‚ü¶Œî‚üß} = ext lemma
        where
        lemma : ‚àÄ(‚ü¶A‚üß : ‚ü¶ A ‚üß‚Çú n) ‚Üí
                Œõ ‚ü¶ traverse (œÉ ‚Üë k) M ‚üß‚Çò n ‚ü¶Œî‚üß ‚ü¶A‚üß ‚â° (Œõ ‚ü¶ M ‚üß‚Çò ‚àò ‚ü¶subst‚üß œÉ) n ‚ü¶Œî‚üß ‚ü¶A‚üß
        lemma ‚ü¶A‚üß rewrite traverse-sound (œÉ ‚Üë k) M {n} {‚ü¶Œî‚üß , ‚ü¶A‚üß}
                        | ‚ü¶‚Üë‚üß (A now) œÉ {n} {‚ü¶Œî‚üß , ‚ü¶A‚üß} = refl
        -- begin
        --     Œõ ‚ü¶ traverse (œÉ ‚Üë k) M ‚üß‚Çò      ‚âà‚ü® Œõ-cong (traverse-sound (œÉ ‚Üë k) M) ‚ü©
        --     Œõ (‚ü¶ M ‚üß‚Çò ‚àò ‚ü¶subst‚üß (œÉ ‚Üë k))    ‚âà‚ü® Œõ-cong (‚âà-cong-right (‚ü¶‚Üë‚üß (A now) œÉ)) ‚ü©
        --     Œõ (‚ü¶ M ‚üß‚Çò ‚àò (‚ü¶subst‚üß œÉ * id))   ‚âà‚ü® Œõ-*id ‚ü©
        --     Œõ ‚ü¶ M ‚üß‚Çò ‚àò ‚ü¶subst‚üß œÉ
        -- ‚àé
    traverse-sound œÉ (M $ N) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß}
                                             | traverse-sound œÉ N {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ unit = refl
    traverse-sound œÉ [ M ,, N ] {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß}
                                                | traverse-sound œÉ N {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ (fst M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ (snd M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ (inl M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ (inr M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ (case M inl‚Ü¶ N‚ÇÅ ||inr‚Ü¶ N‚ÇÇ) {n} {‚ü¶Œî‚üß}
        rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} with ‚ü¶ M ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß)
    traverse-sound œÉ (case_inl‚Ü¶_||inr‚Ü¶_ {A = A} M N‚ÇÅ N‚ÇÇ) {n} {‚ü¶Œî‚üß} | inj‚ÇÅ ‚ü¶A‚üß
        rewrite traverse-sound (œÉ ‚Üë k) N‚ÇÅ {n} {‚ü¶Œî‚üß , ‚ü¶A‚üß}
              | ‚ü¶‚Üë‚üß (A now) œÉ {n} {‚ü¶Œî‚üß , ‚ü¶A‚üß} = refl
    traverse-sound œÉ (case_inl‚Ü¶_||inr‚Ü¶_ {B = B} M N‚ÇÅ N‚ÇÇ) {n} {‚ü¶Œî‚üß} | inj‚ÇÇ ‚ü¶B‚üß
        rewrite traverse-sound (œÉ ‚Üë k) N‚ÇÇ {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß}
              | ‚ü¶‚Üë‚üß (B now) œÉ {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß} = refl
    traverse-sound ‚óè (svar ())
    traverse-sound (œÉ ‚ñ∏ T) (svar top) = ‚ü¶ùìâ‚üß T
    traverse-sound (œÉ ‚ñ∏ T) (svar (pop x)) = traverse-sound œÉ (svar x)
    traverse-sound œÉ (sample M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse-sound {Œì} {Œî} {A} œÉ (stable M) {n} {‚ü¶Œî‚üß} = ext lemma
        where
        lemma : ‚àÄ l -> ‚ü¶ traverse {Œì} œÉ (stable M) ‚üß‚Çò n ‚ü¶Œî‚üß l
                     ‚â° (‚ü¶ stable {Œì} M ‚üß‚Çò ‚àò ‚ü¶subst‚üß œÉ) n ‚ü¶Œî‚üß l
        lemma l rewrite traverse-sound (œÉ ‚ÜìÀ¢ k) M {l} {‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l}
                      | ‚ñ°-‚â° n l (‚ü¶subst‚üß-‚ü¶‚üßÀ¢‚Çì-‚ñ° œÉ {n} {‚ü¶Œî‚üß}) l = refl
    traverse-sound œÉ (sig M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ (letSig_In_ {A = A} M N) {n} {‚ü¶Œî‚üß}
        rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß}
              | traverse-sound (œÉ ‚Üë k) N {n} {‚ü¶Œî‚üß , ‚ü¶ M ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß)}
              | ‚ü¶‚Üë‚üß (A always) œÉ {n} {‚ü¶Œî‚üß , (‚ü¶ M ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß))} = refl
    traverse-sound œÉ (wait M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse-sound œÉ (event E) = traverse‚Ä≤-sound œÉ E

    traverse‚Ä≤-sound œÉ (pure M) {n} {‚ü¶Œî‚üß} rewrite traverse-sound œÉ M {n} {‚ü¶Œî‚üß} = refl
    traverse‚Ä≤-sound œÉ (letSig_InC_ {A = A} S C) {n} {‚ü¶Œî‚üß}
                rewrite traverse-sound œÉ S {n} {‚ü¶Œî‚üß}
                      | traverse‚Ä≤-sound (œÉ ‚Üë k) C {n} {‚ü¶Œî‚üß , ‚ü¶ S ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß)}
                      | ‚ü¶‚Üë‚üß (A always) œÉ {n} {‚ü¶Œî‚üß , (‚ü¶ S ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß))} = refl

    traverse‚Ä≤-sound {Œì} {Œî} œÉ (letEvt_In_ {A = A} E C) {n} {‚ü¶Œî‚üß}
        rewrite traverse-sound œÉ E {n} {‚ü¶Œî‚üß} =
        begin
            ‚ü¶ E ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) >>= (Œª l ‚ü¶A‚üß ‚Üí ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k) C ‚üß·µê l (‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶A‚üß))
        ‚â°‚ü® cong (Œª x ‚Üí ‚ü¶ E ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) >>= x) (ext Œª l ‚Üí ext Œª ‚ü¶A‚üß ‚Üí
            begin
                ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k) C ‚üß·µê l (‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶A‚üß)
            ‚â°‚ü® traverse‚Ä≤-sound (œÉ ‚ÜìÀ¢ k ‚Üë k) C {l} {‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶A‚üß} ‚ü©
                ‚ü¶ C ‚üß·µê l (‚ü¶subst‚üß (_‚Üë_ {A now} (œÉ ‚ÜìÀ¢ k) k) l (‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶A‚üß))
            ‚â°‚ü® cong (‚ü¶ C ‚üß·µê l) (‚ü¶‚Üë‚üß (A now) (œÉ ‚ÜìÀ¢ k) {l} {‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶A‚üß}) ‚ü©
                ‚ü¶ C ‚üß·µê l (‚ü¶subst‚üß (œÉ ‚ÜìÀ¢ k) l (‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l) , ‚ü¶A‚üß)
            ‚â°‚ü® cong (Œª x ‚Üí ‚ü¶ C ‚üß·µê l (x , ‚ü¶A‚üß)) (‚ñ°-‚â° n l (‚ü¶subst‚üß-‚ü¶‚üßÀ¢‚Çì-‚ñ° œÉ) l) ‚ü©
                ‚ü¶ C ‚üß·µê l (‚ü¶ Œì ‚üßÀ¢‚Çì-‚ñ° n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) l , ‚ü¶A‚üß)
            ‚àé)
         ‚ü©
            ‚ü¶ E ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) >>= (Œª l ‚ü¶A‚üß ‚Üí ‚ü¶ C ‚üß·µê l (‚ü¶ Œì ‚üßÀ¢‚Çì-‚ñ° n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) l , ‚ü¶A‚üß))
        ‚â°‚ü®‚ü©
            ‚ü¶ letEvt E In C ‚üß·µê n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß)
        ‚àé
    traverse‚Ä≤-sound {_} {Œî} œÉ (select_‚Ü¶_||_‚Ü¶_||both‚Ü¶_ {Œì} {A} {B} {C} E‚ÇÅ C‚ÇÅ E‚ÇÇ C‚ÇÇ C‚ÇÉ) {n} {‚ü¶Œî‚üß} =
        begin
            ‚ü¶ traverse‚Ä≤ œÉ (select E‚ÇÅ ‚Ü¶ C‚ÇÅ || E‚ÇÇ ‚Ü¶ C‚ÇÇ ||both‚Ü¶ C‚ÇÉ) ‚üß·µê n ‚ü¶Œî‚üß
        ‚â°‚ü®‚ü©
            ‚ü¶ select traverse œÉ E‚ÇÅ ‚Ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÅ
                  || traverse œÉ E‚ÇÇ ‚Ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÇ
                  ||both‚Ü¶            traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÉ ‚üß·µê n ‚ü¶Œî‚üß
        ‚â°‚ü®‚ü©
            (‚óá-select n (‚ü¶ traverse œÉ E‚ÇÅ ‚üß‚Çò n ‚ü¶Œî‚üß , ‚ü¶ traverse œÉ E‚ÇÇ ‚üß‚Çò n ‚ü¶Œî‚üß)
            >>= ‚ü¶select‚üß Œî A B C n ‚ü¶Œî‚üß
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÅ ‚üß·µê
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÇ ‚üß·µê
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÉ ‚üß·µê)
        ‚â°‚ü® cong (Œª x ‚Üí ‚óá-select n (‚ü¶ traverse œÉ E‚ÇÅ ‚üß‚Çò n ‚ü¶Œî‚üß , ‚ü¶ traverse œÉ E‚ÇÇ ‚üß‚Çò n ‚ü¶Œî‚üß) >>= x)
            (ext Œª l ‚Üí ext Œª c ‚Üí
            begin
                ‚ü¶select‚üß Œî A B C n ‚ü¶Œî‚üß
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÅ ‚üß·µê
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÇ ‚üß·µê
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÉ ‚üß·µê l c
            ‚â°‚ü® ind-hyp l c ‚ü©
                ‚ü¶select‚üß Œî A B C n ‚ü¶Œî‚üß
                    (‚ü¶ C‚ÇÅ ‚üß·µê ‚àò (‚ü¶subst‚üß (_‚Üë_ {A now} (_‚Üë_ {Event B now} (œÉ ‚ÜìÀ¢ k) k) k)))
                    (‚ü¶ C‚ÇÇ ‚üß·µê ‚àò (‚ü¶subst‚üß (_‚Üë_ {B now} (_‚Üë_ {Event A now} (œÉ ‚ÜìÀ¢ k) k) k)))
                    (‚ü¶ C‚ÇÉ ‚üß·µê ‚àò (‚ü¶subst‚üß (_‚Üë_ {B now} (_‚Üë_ {A now}       (œÉ ‚ÜìÀ¢ k) k) k))) l c
            ‚â°‚ü® ‚ü¶subst‚üß-‚ü¶select‚üß A B œÉ n l c ‚ü¶Œî‚üß ‚ü©
                ‚ü¶select‚üß Œì A B C n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) ‚ü¶ C‚ÇÅ ‚üß·µê ‚ü¶ C‚ÇÇ ‚üß·µê ‚ü¶ C‚ÇÉ ‚üß·µê l c
            ‚àé)
         ‚ü©
            ‚óá-select n ( ‚ü¶ traverse œÉ E‚ÇÅ ‚üß‚Çò n ‚ü¶Œî‚üß , ‚ü¶ traverse œÉ E‚ÇÇ ‚üß‚Çò n ‚ü¶Œî‚üß)
            >>= ‚ü¶select‚üß Œì A B C n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) ‚ü¶ C‚ÇÅ ‚üß·µê ‚ü¶ C‚ÇÇ ‚üß·µê ‚ü¶ C‚ÇÉ ‚üß·µê
        ‚â°‚ü® cong‚ÇÇ (Œª y z ‚Üí ‚óá-select n (y , z) >>= _) (traverse-sound œÉ E‚ÇÅ)
                                                    (traverse-sound œÉ E‚ÇÇ) ‚ü©
            ‚óá-select n (‚ü¶ E‚ÇÅ ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) , ‚ü¶ E‚ÇÇ ‚üß‚Çò n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß))
            >>= ‚ü¶select‚üß Œì A B C n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß) ‚ü¶ C‚ÇÅ ‚üß·µê ‚ü¶ C‚ÇÇ ‚üß·µê ‚ü¶ C‚ÇÉ ‚üß·µê
        ‚â°‚ü®‚ü©
            ‚ü¶ select E‚ÇÅ ‚Ü¶ C‚ÇÅ || E‚ÇÇ ‚Ü¶ C‚ÇÇ ||both‚Ü¶ C‚ÇÉ ‚üß·µê n (‚ü¶subst‚üß œÉ n ‚ü¶Œî‚üß)
        ‚àé
        where
        ind-hyp : ‚àÄ l c
            -> ‚ü¶select‚üß Œî A B C n ‚ü¶Œî‚üß
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÅ ‚üß·µê
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÇ ‚üß·µê
                    ‚ü¶ traverse‚Ä≤ (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÉ ‚üß·µê l c
             ‚â° ‚ü¶select‚üß Œî A B C n ‚ü¶Œî‚üß
                    (‚ü¶ C‚ÇÅ ‚üß·µê ‚àò (‚ü¶subst‚üß (_‚Üë_ {A now} (_‚Üë_ {Event B now} (œÉ ‚ÜìÀ¢ k) k) k)))
                    (‚ü¶ C‚ÇÇ ‚üß·µê ‚àò (‚ü¶subst‚üß (_‚Üë_ {B now} (_‚Üë_ {Event A now} (œÉ ‚ÜìÀ¢ k) k) k)))
                    (‚ü¶ C‚ÇÉ ‚üß·µê ‚àò (‚ü¶subst‚üß (_‚Üë_ {B now} (_‚Üë_ {A now}       (œÉ ‚ÜìÀ¢ k) k) k))) l c
        ind-hyp l c rewrite ext (Œª n -> (ext Œª ‚ü¶Œî‚üß -> (traverse‚Ä≤-sound (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÅ {n} {‚ü¶Œî‚üß})))
                          | ext (Œª n -> (ext Œª ‚ü¶Œî‚üß -> (traverse‚Ä≤-sound (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÇ {n} {‚ü¶Œî‚üß})))
                          | ext (Œª n -> (ext Œª ‚ü¶Œî‚üß -> (traverse‚Ä≤-sound (œÉ ‚ÜìÀ¢ k ‚Üë k ‚Üë k) C‚ÇÉ {n} {‚ü¶Œî‚üß}))) = refl
