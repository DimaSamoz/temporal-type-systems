
-- Instances of semantic kits
module Semantics.Substitution.Instances where

open import Syntax.Types
open import Syntax.Context renaming (_,_ to _,,_)
open import Syntax.Terms
open import Syntax.Substitution.Kits
open import Syntax.Substitution.Instances

open import Semantics.Types
open import Semantics.Context
open import Semantics.Select
open import Semantics.Terms
open import Semantics.Substitution.Kits
open import Semantics.Substitution.Traversal

open import CategoryTheory.Categories using (ext)
open import CategoryTheory.NatTrans
open import CategoryTheory.Functor
open import CategoryTheory.Monad
open import CategoryTheory.Comonad
open import CategoryTheory.Instances.Reactive renaming (top to ‚ä§)
open import TemporalOps.Diamond
open import TemporalOps.Box
open import TemporalOps.Common.Rewriting

open import Data.Sum
open import Data.Product
open import Relation.Binary.PropositionalEquality
open import Relation.Binary.HeterogeneousEquality as ‚âÖ using (_‚âÖ_)

open import Holes.Term using (‚åû_‚åü)
open import Holes.Cong.Propositional

open ‚â°-Reasoning
private module F-‚ñ° = Functor F-‚ñ°
open Comonad W-‚ñ°

-- Denotation of variable kits
‚ü¶ùí±ar‚üß : ‚ü¶Kit‚üß ùí±ar
‚ü¶ùí±ar‚üß = record
    { ‚ü¶_‚üß = ‚ü¶_‚üß-var
    ; ‚ü¶ùìã‚üß = Œª A Œî ‚Üí refl
    ; ‚ü¶ùìâ‚üß = ‚ü¶ùìâ‚üß-var
    ; ‚ü¶ùìå‚üß = Œª B T ‚Üí refl
    ; ‚ü¶ùí∂‚üß = ‚ü¶ùí∂‚üß-var
    }
    where
    open Kit ùí±ar
    ‚ü¶_‚üß-var : ‚àÄ{A Œì} ‚Üí Var Œì A ‚Üí ‚ü¶ Œì ‚üß‚Çì ‚á¥ ‚ü¶ A ‚üß‚±º
    ‚ü¶ top ‚üß-var n (_ , ‚ü¶A‚üß) = ‚ü¶A‚üß
    ‚ü¶ pop v ‚üß-var n (‚ü¶Œì‚üß , _) = ‚ü¶ v ‚üß-var n ‚ü¶Œì‚üß

    ‚ü¶ùìâ‚üß-var : ‚àÄ{A Œì} ‚Üí (x : Var Œì A)
          -> ‚ü¶ ùìâ x ‚üß‚Çò ‚âà ‚ü¶ x ‚üß-var
    ‚ü¶ùìâ‚üß-var {A now} top = refl
    ‚ü¶ùìâ‚üß-var {A always} top = refl
    ‚ü¶ùìâ‚üß-var {A now} (pop x) = ‚ü¶ùìâ‚üß-var x
    ‚ü¶ùìâ‚üß-var {A always} (pop x) = ‚ü¶ùìâ‚üß-var x

    ‚ü¶ùí∂‚üß-var : ‚àÄ{A Œî} ‚Üí (x : Var Œî (A always))
           -> F-‚ñ°.fmap ‚ü¶ ùí∂ x ‚üß-var ‚àò ‚ü¶ Œî À¢‚üß‚ñ° ‚âà Œ¥.at ‚ü¶ A ‚üß‚Çú ‚àò ‚ü¶ x ‚üß-var
    ‚ü¶ùí∂‚üß-var top = refl
    ‚ü¶ùí∂‚üß-var (pop {B = B now} x) = ‚ü¶ùí∂‚üß-var x
    ‚ü¶ùí∂‚üß-var (pop {B = B always} x) = ‚ü¶ùí∂‚üß-var x


-- Denotation of term kits
‚ü¶ùíØerm‚üß : ‚ü¶Kit‚üß ùíØerm
‚ü¶ùíØerm‚üß = record
    { ‚ü¶_‚üß = ‚ü¶_‚üß‚Çò
    ; ‚ü¶ùìã‚üß = Œª A Œî ‚Üí refl
    ; ‚ü¶ùìâ‚üß = Œª T ‚Üí refl
    ; ‚ü¶ùìå‚üß = ‚ü¶ùìå‚üß-term
    ; ‚ü¶ùí∂‚üß = ‚ü¶ùí∂‚üß-term
    }
    where
    open Kit ùíØerm
    open ‚ü¶Kit‚üß ‚ü¶ùí±ar‚üß
    open K
    open ‚ü¶K‚üß ‚ü¶ùí±ar‚üß

    ‚ü¶ùìå‚üß-term : ‚àÄ B {Œî A} ‚Üí (M : Term Œî A)
           -> ‚ü¶ ùìå {B} M ‚üß‚Çò ‚âà ‚ü¶ M ‚üß‚Çò ‚àò œÄ‚ÇÅ
    ‚ü¶ùìå‚üß-term B {Œî} M {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß}
        rewrite traverse-sound ‚ü¶ùí±ar‚üß (_‚Å∫_ {B} (id‚Çõ ùí±ar) ùí±ar) M {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß}
              | ‚ü¶‚Å∫‚üß B {Œî} (id‚Çõ ùí±ar) {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß}
              | ‚ü¶id‚Çõ‚üß {Œî} {n} {‚ü¶Œî‚üß} = refl

    ‚ü¶ùí∂‚üß-term : ‚àÄ{A Œî} (M : Œî ‚ä¢ A always)
           -> F-‚ñ°.fmap ‚ü¶ ùí∂ M ‚üß‚Çò ‚àò ‚ü¶ Œî À¢‚üß‚ñ° ‚âà Œ¥.at ‚ü¶ A ‚üß‚Çú ‚àò ‚ü¶ M ‚üß‚Çò
    ‚ü¶ùí∂‚üß-term {A} {‚àô} (var ())
    ‚ü¶ùí∂‚üß-term {A} {‚àô} (stable M) = refl
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B now} (var (pop x)) = ‚ü¶ùí∂‚üß-term (var x)
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B now} (stable M) = ‚ü¶ùí∂‚üß-term {A} {Œî} (stable M)
    ‚ü¶ùí∂‚üß-term {.B} {Œî ,, B always} (var top) = refl
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B always} (var (pop x)) {n} {‚ü¶Œî‚üß , ‚ñ°‚ü¶B‚üß} = ext lemma
        where
        lemma : ‚àÄ l -> ‚ü¶ traverse ùí±ar (_‚Å∫_ {B always} (id‚Çõ ùí±ar) ùí±ar) (ùí∂ (var x)) ‚üß‚Çò l (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l , ‚ñ°‚ü¶B‚üß)
                     ‚â° ‚ü¶ var x ‚üß‚Çò n ‚ü¶Œî‚üß
        lemma l rewrite traverse-sound ‚ü¶ùí±ar‚üß (_‚Å∫_ {B always} (id‚Çõ ùí±ar) ùí±ar) (ùí∂ (var x)) {l} {‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l , ‚ñ°‚ü¶B‚üß}
                      | ‚ü¶‚Å∫‚üß (B always) {Œî À¢} (id‚Çõ ùí±ar) {l} {‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l , ‚ñ°‚ü¶B‚üß}
                      | ‚ü¶id‚Çõ‚üß {Œî À¢} {l} {‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l}
                      | ‚ñ°-‚â° n l (‚ü¶ùí∂‚üß-term (var x) {n} {‚ü¶Œî‚üß}) l = refl
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B always} (stable M) {n} {‚ü¶Œî‚üß , ‚ñ°‚ü¶B‚üß} = ext Œª x ‚Üí ext (lemma2 x)
        where
        lemma1 : ‚àÄ Œî (n l m : ‚Ñï) (‚ü¶Œî‚üß : ‚ü¶ Œî ‚üß‚Çì n)
                 -> (F-‚ñ°.fmap ‚ü¶ Œî À¢ À¢‚üß‚ñ° ‚àò ‚ü¶ Œî À¢‚üß‚ñ°) n ‚ü¶Œî‚üß l m
                  ‚â° (F-‚ñ°.fmap ‚ü¶ Œî À¢ À¢‚üß ‚àò ‚ü¶ Œî À¢‚üß‚ñ°) n ‚ü¶Œî‚üß m
        lemma1 Œî n l m ‚ü¶Œî‚üß rewrite ‚ñ°-‚â° l m (‚ñ°-‚â° n l (‚ü¶À¢‚üß‚ñ°-twice Œî {n} {‚ü¶Œî‚üß}) l) m
                = ‚ñ°-‚â° n m (‚ü¶À¢‚üß-comm Œî) m

        lemma2 : ‚àÄ l j
              -> (F-‚ñ°.fmap ‚ü¶ ùí∂ {Œî ,, B always} (stable M) ‚üß‚Çò ‚àò ‚ü¶ Œî ,, B always À¢‚üß‚ñ°) n (‚ü¶Œî‚üß , ‚ñ°‚ü¶B‚üß) l j
               ‚â° (Œ¥.at ‚ü¶ A ‚üß‚Çú ‚àò ‚ü¶ stable {Œî ,, B always} M ‚üß‚Çò) n (‚ü¶Œî‚üß , ‚ñ°‚ü¶B‚üß) l j
        lemma2 l j =
            begin
                ‚ü¶ subst (Œª x ‚Üí x ,, B always ‚ä¢ A now) (À¢-idemp‚Ä≤ Œî) M ‚üß‚Çò j (‚ü¶ Œî À¢ À¢‚üß‚ñ° l (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l) j  , ‚ñ°‚ü¶B‚üß)
            ‚â°‚ü® cong (Œª x ‚Üí ‚ü¶ subst (Œª x ‚Üí x ,, B always ‚ä¢ A now) (À¢-idemp‚Ä≤ Œî) M ‚üß‚Çò j (x , ‚ñ°‚ü¶B‚üß)) (lemma1 Œî n l j ‚ü¶Œî‚üß) ‚ü©
                ‚ü¶ subst (Œª x ‚Üí x ,, B always ‚ä¢ A now) (À¢-idemp‚Ä≤ Œî) M ‚üß‚Çò j (‚ü¶ Œî À¢ À¢‚üß j (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß j) , ‚ñ°‚ü¶B‚üß)
            ‚â°‚ü® cong (Œª x ‚Üí ‚ü¶ subst (Œª x ‚Üí x ,, B always ‚ä¢ A now) (À¢-idemp‚Ä≤ Œî) M ‚üß‚Çò j (x , ‚ñ°‚ü¶B‚üß)) (‚ü¶À¢‚üß-rew Œî n j ‚ü¶Œî‚üß) ‚ü©
                ‚ü¶ subst (Œª x ‚Üí x ,, B always ‚ä¢ A now) (À¢-idemp‚Ä≤ Œî) M ‚üß‚Çò j (rew (‚ü¶À¢‚üß-idemp Œî j) (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß j) , ‚ñ°‚ü¶B‚üß)
            ‚âÖ‚ü® full-eq j M-eq (‚âÖ.sym (rew-to-‚âÖ (‚ü¶À¢‚üß-idemp Œî j))) ‚ñ°‚ü¶B‚üß ‚ü©
                ‚ü¶ M ‚üß‚Çò j (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß j , ‚ñ°‚ü¶B‚üß)
            ‚àé

         where
            À¢-idemp‚Ä≤ : ‚àÄ Œì -> Œì À¢ ‚â° Œì À¢ À¢
            À¢-idemp‚Ä≤ Œì = sym (À¢-idemp Œì)

            ‚ü¶À¢‚üß-idemp : ‚àÄ Œî n -> ‚ü¶ Œî À¢ ‚üß‚Çì n ‚â° ‚ü¶ Œî À¢ À¢ ‚üß‚Çì n
            ‚ü¶À¢‚üß-idemp Œî n = cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çì n) (À¢-idemp‚Ä≤ Œî)

            rew-lemma : ‚àÄ Œî A n l ‚ü¶Œî‚üß ‚ñ°‚ü¶A‚üß
                 -> (rew (cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çì l) (À¢-idemp‚Ä≤ Œî)) (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l) , ‚ñ°‚ü¶A‚üß)
                  ‚â° rew (cong (Œª x ‚Üí ‚ü¶ x ‚üß‚Çì l) (À¢-idemp‚Ä≤ (Œî ,, A always))) (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l , ‚ñ°‚ü¶A‚üß)
            rew-lemma Œî A n l ‚ü¶Œî‚üß ‚ñ°‚ü¶A‚üß rewrite À¢-idemp Œî = refl

            ‚ü¶À¢‚üß-rew : ‚àÄ Œî n l ‚ü¶Œî‚üß -> ‚ü¶ Œî À¢ À¢‚üß l (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l)
                                  ‚â° rew (‚ü¶À¢‚üß-idemp Œî l) (‚ü¶ Œî À¢‚üß‚ñ° n ‚ü¶Œî‚üß l)
            ‚ü¶À¢‚üß-rew ‚àô n l ‚ü¶Œî‚üß = refl
            ‚ü¶À¢‚üß-rew (Œî ,, A now) n l (‚ü¶Œî‚üß , ‚ü¶A‚üß) = ‚ü¶À¢‚üß-rew Œî n l ‚ü¶Œî‚üß
            ‚ü¶À¢‚üß-rew (Œî ,, A always) n l (‚ü¶Œî‚üß , ‚ñ°‚ü¶A‚üß)
                    rewrite ‚ü¶À¢‚üß-rew Œî n l ‚ü¶Œî‚üß
                          | rew-lemma Œî A n l ‚ü¶Œî‚üß ‚ñ°‚ü¶A‚üß = refl

            M-eq : subst (Œª x ‚Üí x ,, B always ‚ä¢ A now) (À¢-idemp‚Ä≤ Œî) M  ‚âÖ M
            M-eq = ‚âÖ.‚â°-subst-removable (Œª x ‚Üí x ,, B always ‚ä¢ A now) (À¢-idemp‚Ä≤ Œî) M

            full-eq : ‚àÄ j {M‚ÇÅ : Œî À¢ À¢ ,, B always ‚ä¢ A now}
                          {M‚ÇÇ : Œî À¢ ,, B always ‚ä¢ A now}
                          {‚ü¶Œî‚üß‚ÇÅ : ‚ü¶ Œî À¢ À¢ ‚üß‚Çì j} {‚ü¶Œî‚üß‚ÇÇ : ‚ü¶ Œî À¢ ‚üß‚Çì j}
                          (p-M : M‚ÇÅ ‚âÖ M‚ÇÇ) (p-‚ü¶Œî‚üß : ‚ü¶Œî‚üß‚ÇÅ ‚âÖ ‚ü¶Œî‚üß‚ÇÇ) ‚ñ°‚ü¶B‚üß
                   -> ‚ü¶ M‚ÇÅ ‚üß‚Çò j (‚ü¶Œî‚üß‚ÇÅ , ‚ñ°‚ü¶B‚üß) ‚âÖ ‚ü¶ M‚ÇÇ ‚üß‚Çò j (‚ü¶Œî‚üß‚ÇÇ , ‚ñ°‚ü¶B‚üß)
            full-eq j p-M p-‚ü¶Œî‚üß ‚ñ°‚ü¶B‚üß rewrite À¢-idemp Œî
                    = ‚âÖ.cong‚ÇÇ ((Œª x y ‚Üí ‚ü¶ x ‚üß‚Çò j (y , ‚ñ°‚ü¶B‚üß))) p-M p-‚ü¶Œî‚üß
