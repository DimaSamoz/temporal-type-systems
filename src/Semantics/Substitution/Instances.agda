
-- Instances of semantic kits
module Semantics.Substitution.Instances where

open import Syntax.Types
open import Syntax.Context renaming (_,_ to _,,_)
open import Syntax.Terms
open import Syntax.Substitution.Kits
open import Syntax.Substitution.Instances

open import Semantics.Types
open import Semantics.Context
open import Semantics.Select
open import Semantics.Terms
open import Semantics.Substitution.Kits
open import Semantics.Substitution.Traversal

open import CategoryTheory.Categories using (ext)
open import CategoryTheory.NatTrans
open import CategoryTheory.Functor
open import CategoryTheory.Monad
open import CategoryTheory.Comonad
open import CategoryTheory.Instances.Reactive renaming (top to ‚ä§)
open import TemporalOps.Diamond
open import TemporalOps.Box

open import Data.Sum
open import Data.Product
open import Relation.Binary.PropositionalEquality

open ‚â°-Reasoning
private module F-‚ñ° = Functor F-‚ñ°
open Comonad W-‚ñ°

-- Denotation of variable kits
‚ü¶ùí±ar‚üß : ‚ü¶Kit‚üß ùí±ar
‚ü¶ùí±ar‚üß = record
    { ‚ü¶_‚üß = ‚ü¶_‚üß-var
    ; ‚ü¶ùìã‚üß = Œª A Œî ‚Üí refl
    ; ‚ü¶ùìâ‚üß = ‚ü¶ùìâ‚üß-var
    ; ‚ü¶ùìå‚üß = Œª B T ‚Üí refl
    ; ‚ü¶ùí∂‚üß = ‚ü¶ùí∂‚üß-var
    }
    where
    open Kit ùí±ar
    ‚ü¶_‚üß-var : ‚àÄ{A Œì} ‚Üí Var Œì A ‚Üí ‚ü¶ Œì ‚üß‚Çì ‚á¥ ‚ü¶ A ‚üß‚±º
    ‚ü¶ top ‚üß-var n (_ , ‚ü¶A‚üß) = ‚ü¶A‚üß
    ‚ü¶ pop v ‚üß-var n (‚ü¶Œì‚üß , _) = ‚ü¶ v ‚üß-var n ‚ü¶Œì‚üß

    ‚ü¶ùìâ‚üß-var : ‚àÄ{A Œì} ‚Üí (x : Var Œì A)
          -> ‚ü¶ ùìâ x ‚üß‚Çò ‚âà ‚ü¶ x ‚üß-var
    ‚ü¶ùìâ‚üß-var {A now} top = refl
    ‚ü¶ùìâ‚üß-var {A always} top = refl
    ‚ü¶ùìâ‚üß-var {A now} (pop x) = ‚ü¶ùìâ‚üß-var x
    ‚ü¶ùìâ‚üß-var {A always} (pop x) = ‚ü¶ùìâ‚üß-var x

    ‚ü¶ùí∂‚üß-var : ‚àÄ{A Œî} ‚Üí (x : Var Œî (A always))
           -> F-‚ñ°.fmap ‚ü¶ ùí∂ x ‚üß-var ‚àò ‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° ‚âà Œ¥.at ‚ü¶ A ‚üß‚Çú ‚àò ‚ü¶ x ‚üß-var
    ‚ü¶ùí∂‚üß-var top = refl
    ‚ü¶ùí∂‚üß-var (pop {B = B now} x) = ‚ü¶ùí∂‚üß-var x
    ‚ü¶ùí∂‚üß-var (pop {B = B always} x) = ‚ü¶ùí∂‚üß-var x


-- Denotation of term kits
‚ü¶ùíØerm‚üß : ‚ü¶Kit‚üß ùíØerm
‚ü¶ùíØerm‚üß = record
    { ‚ü¶_‚üß = ‚ü¶_‚üß‚Çò
    ; ‚ü¶ùìã‚üß = Œª A Œî ‚Üí ‚ü¶ùìâ‚üß {A} top
    ; ‚ü¶ùìâ‚üß = Œª T ‚Üí refl
    ; ‚ü¶ùìå‚üß = ‚ü¶ùìå‚üß-term
    ; ‚ü¶ùí∂‚üß = ‚ü¶ùí∂‚üß-term
    }
    where
    open Kit ùíØerm
    open ‚ü¶Kit‚üß ‚ü¶ùí±ar‚üß
    open K
    open ‚ü¶K‚üß ‚ü¶ùí±ar‚üß

    ‚ü¶ùìå‚üß-term : ‚àÄ B {Œî A} ‚Üí (M : Term Œî A)
           -> ‚ü¶ ùìå {B} M ‚üß‚Çò ‚âà ‚ü¶ M ‚üß‚Çò ‚àò œÄ‚ÇÅ
    ‚ü¶ùìå‚üß-term B {Œî} M {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß}
        rewrite traverse-sound ‚ü¶ùí±ar‚üß (_‚Å∫_ {B} (id‚Çõ ùí±ar) ùí±ar) M {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß}
              | ‚ü¶‚Å∫‚üß B {Œî} (id‚Çõ ùí±ar) {n} {‚ü¶Œî‚üß , ‚ü¶B‚üß}
              | ‚ü¶id‚Çõ‚üß {Œî} {n} {‚ü¶Œî‚üß} = refl

    ‚ü¶ùí∂‚üß-term : ‚àÄ{A Œî} (M : Œî ‚ä¢ A always)
           -> F-‚ñ°.fmap ‚ü¶ ùí∂ M ‚üß‚Çò ‚àò ‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° ‚âà Œ¥.at ‚ü¶ A ‚üß‚Çú ‚àò ‚ü¶ M ‚üß‚Çò
    ‚ü¶ùí∂‚üß-term {A} {‚àô} (svar ())
    ‚ü¶ùí∂‚üß-term {A} {‚àô} (stable M) = refl
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B now} (svar (pop x)) = ‚ü¶ùí∂‚üß-term (svar x)
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B now} (stable M) = ‚ü¶ùí∂‚üß-term {A} {Œî} (stable M)
    ‚ü¶ùí∂‚üß-term {.B} {Œî ,, B always} (svar top) = refl
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B always} (svar (pop x)) {n} {‚ü¶Œî‚üß , ‚ü¶‚ñ°B‚üß} = ext lemma
        where
        lemma : ‚àÄ l -> ‚ü¶ traverse ùí±ar (_‚Å∫_ {B always} (id‚Çõ ùí±ar) ùí±ar) (ùí∂ (svar x)) ‚üß‚Çò l (‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶‚ñ°B‚üß)
                     ‚â° ‚ü¶ svar x ‚üß‚Çò n ‚ü¶Œî‚üß
        lemma l rewrite traverse-sound ‚ü¶ùí±ar‚üß (_‚Å∫_ {B always} (id‚Çõ ùí±ar) ùí±ar) (ùí∂ (svar x)) {l} {‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶‚ñ°B‚üß}
                      | ‚ü¶‚Å∫‚üß (B always) {Œî À¢} (id‚Çõ ùí±ar) {l} {‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l , ‚ü¶‚ñ°B‚üß}
                      | ‚ü¶id‚Çõ‚üß {Œî À¢} {l} {‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l}
                      | ‚ñ°-‚â° n l (‚ü¶ùí∂‚üß-term (svar x) {n} {‚ü¶Œî‚üß}) l = refl
    ‚ü¶ùí∂‚üß-term {A} {Œî ,, B always} (stable M) {n} {‚ü¶Œî‚üß , ‚ü¶‚ñ°B‚üß} = ext Œª l ‚Üí ext (lemma l)
        where
        postulate
            duh : ‚àÄ {A : Set}{x y : A} -> x ‚â° y
        lemma : ‚àÄ l m -> ‚ü¶ subst (Œª x‚ÇÅ ‚Üí x‚ÇÅ ,, B always ‚ä¢ A now) (sym (À¢-idemp Œî)) M ‚üß‚Çò m
                            (‚ü¶ Œî À¢ ‚üßÀ¢‚Çì-‚ñ° l (‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß l) m , ‚ü¶‚ñ°B‚üß)
                          ‚â° ‚ü¶ M ‚üß‚Çò m (‚ü¶ Œî ‚üßÀ¢‚Çì-‚ñ° n ‚ü¶Œî‚üß m , ‚ü¶‚ñ°B‚üß)
        lemma l m
            rewrite ‚ñ°-‚â° l m (‚ñ°-‚â° n l (‚ü¶‚üßÀ¢‚Çì-‚ñ°-twice Œî {n} {‚ü¶Œî‚üß}) l) m
            = duh
