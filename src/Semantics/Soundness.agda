
-- Soundness of term equality
module Semantics.Soundness where

open import Syntax.Types
open import Syntax.Context renaming (_,_ to _,,_)
open import Syntax.Terms
open import Syntax.Kit
open import Syntax.Traversal
open import Syntax.Equality

open import Semantics.Types
open import Semantics.Context
open import Semantics.Select
open import Semantics.Terms
open import Semantics.Kit
open import Semantics.Traversal

open import CategoryTheory.Categories using (Category ; ext)
open import CategoryTheory.BCCCs.Cartesian using (Product)
open import CategoryTheory.BCCCs
open import CategoryTheory.Instances.Reactive renaming (top to ‚ä§)
open Category ‚Ñùeactive hiding (begin_ ; _‚àé)
open import TemporalOps.Diamond using (‚óá-select ; _>>=_ ; ‚óá_)

open import Data.Sum
open import Data.Product using (_,_ ; proj‚ÇÅ ; proj‚ÇÇ)
open import Relation.Binary.PropositionalEquality as ‚â°
    using (_‚â°_ ; refl ; sym ; trans ; cong ; cong‚ÇÇ ; subst)

open ‚â°.‚â°-Reasoning

open ‚ü¶Kit‚üß ‚ü¶ùíØerm‚üß
open Kit ùíØerm
open ‚ü¶K‚üß ‚ü¶ùíØerm‚üß
open K ùíØerm

-- Soundness of term equality: equal terms have equal denotations
sound : ‚àÄ{A Œì} {M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A}
         -- -> (n : ‚Ñï) (‚ü¶Œì‚üß : ‚ü¶ Œì ‚üß‚Çì n)
         -> Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A
         -> ‚ü¶ M‚ÇÅ ‚üß‚Çò ‚âà ‚ü¶ M‚ÇÇ ‚üß‚Çò
sound (refl M) = refl
sound (Eq.sym eq) = ‚â°.sym (sound eq)
sound (Eq.trans eq‚ÇÅ eq‚ÇÇ) = ‚â°.trans (sound eq‚ÇÅ) (sound eq‚ÇÇ)

sound (Œ≤-lam N M) {n} {‚ü¶Œì‚üß} rewrite subst-sound M N {n} {‚ü¶Œì‚üß} = refl
sound (Œ≤-fst M N) = refl
sound (Œ≤-snd M N) = refl
sound (Œ≤-inl M N‚ÇÅ N‚ÇÇ) {n} {‚ü¶Œì‚üß} rewrite subst-sound M N‚ÇÅ {n} {‚ü¶Œì‚üß} = refl
sound (Œ≤-inr M N‚ÇÅ N‚ÇÇ) {n} {‚ü¶Œì‚üß} rewrite subst-sound M N‚ÇÇ {n} {‚ü¶Œì‚üß} = refl
sound (Œ≤-sig N M) {n} {‚ü¶Œì‚üß} rewrite subst-sound M N {n} {‚ü¶Œì‚üß} = refl

sound (Œ∑-lam {A} M) {n} {‚ü¶Œì‚üß} = ext Œª ‚ü¶A‚üß ‚Üí
                    cong (Œª x ‚Üí x ‚ü¶A‚üß) (‚â°.sym (‚ü¶ùìå‚üß (A now) M n ‚ü¶Œì‚üß ‚ü¶A‚üß))
sound (Œ∑-pair M) {n} {‚ü¶Œì‚üß} with ‚ü¶ M ‚üß‚Çò n ‚ü¶Œì‚üß
sound (Œ∑-pair M) {n} {‚ü¶Œì‚üß} | _ , _ = refl
sound (Œ∑-unit M) = refl
sound (Œ∑-sum M) {n} {‚ü¶Œì‚üß} with ‚ü¶ M ‚üß‚Çò n ‚ü¶Œì‚üß
sound (Œ∑-sum M) {n} {a} | inj‚ÇÅ _ = refl
sound (Œ∑-sum M) {n} {a} | inj‚ÇÇ _ = refl
sound (Œ∑-sig M) = refl

sound (cong-pair eq‚ÇÅ eq‚ÇÇ) {n} {a} rewrite sound eq‚ÇÅ {n} {a}
                                        | sound eq‚ÇÇ {n} {a} = refl
sound (cong-fst eq) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-snd eq) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-lam eq) {n} {a} = ext Œª ‚ü¶A‚üß ‚Üí sound eq
sound (cong-app eq‚ÇÅ eq‚ÇÇ) {n} {a} rewrite sound eq‚ÇÅ {n} {a}
                                       | sound eq‚ÇÇ {n} {a} = refl
sound (cong-inl eq) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-inr eq) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-case eq N‚ÇÅ N‚ÇÇ) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-sig eq) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-letSig eq N) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-sample eq) {n} {a} rewrite sound eq {n} {a} = refl
sound (cong-stable eq) = ext Œª k ‚Üí sound eq

-- Soundness of computational term equality: equal terms have equal denotations
sound‚Ä≤ : ‚àÄ{A Œì} {M‚ÇÅ M‚ÇÇ : Œì ‚ä® A}
         -- -> (n : ‚Ñï) (‚ü¶Œì‚üß : ‚ü¶ Œì ‚üß‚Çì n)
         -> Œì ‚ä® M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A
         -> ‚ü¶ M‚ÇÅ ‚üß·µê ‚âà ‚ü¶ M‚ÇÇ ‚üß·µê
sound‚Ä≤ (refl M) = refl
sound‚Ä≤ (Eq‚Ä≤.sym eq) = ‚â°.sym (sound‚Ä≤ eq)
sound‚Ä≤ (Eq‚Ä≤.trans eq‚ÇÅ eq‚ÇÇ) = ‚â°.trans (sound‚Ä≤ eq‚ÇÅ) (sound‚Ä≤ eq‚ÇÇ)
sound‚Ä≤ (Œ≤-sig‚Ä≤ C M) {n} {‚ü¶Œì‚üß} rewrite subst-sound‚Ä≤ M C {n} {‚ü¶Œì‚üß} = refl
sound‚Ä≤ (Œ∑-sig‚Ä≤ M) = refl
sound‚Ä≤ (cong-pure‚Ä≤ eq) {n} {‚ü¶Œì‚üß} rewrite sound eq {n} {‚ü¶Œì‚üß} = refl
sound‚Ä≤ (cong-letSig‚Ä≤ eq B) {n} {‚ü¶Œì‚üß} rewrite sound eq {n} {‚ü¶Œì‚üß} = refl
