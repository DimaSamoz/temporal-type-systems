
{- Functoriality of temporal operators -}
module Functor where

open import Categories
open Categories.Category using (obj)
-- open Category.Category {{...}}
open import TemporalOps
open import Relation.Binary.PropositionalEquality

-- || Functoriality of ‚óá

-- Lifting of ‚óá
fmap-‚óá : {A B : œÑ} -> A ‚á¥ B -> ‚óá A ‚á¥ ‚óá B
fmap-‚óá f n (k , v) = k , (fmap-delay k f at n) v

-- ‚óá preserves identities
fmap-‚óá-id : ‚àÄ{A : œÑ} {n : ‚Ñï} {a : (‚óá A) n}
         -> (fmap-‚óá id at n) a ‚â° (id {‚óá A} at n) a
fmap-‚óá-id {A} {n} {zero , v} = refl
fmap-‚óá-id {A} {zero} {suc k , v} = refl
fmap-‚óá-id {A} {suc n} {suc k , v}
    rewrite delay-plus {A} 1 k n
          | fmap-delay-id {A} {n} {k} = refl

-- ‚óá preserves composition
fmap-‚óá-‚àò : ‚àÄ {A B C : œÑ} {n : ‚Ñï} {a : (‚óá A) n} {g : B ‚á¥ C} {f : A ‚á¥ B}
        -> (fmap-‚óá (g ‚àò f) at n) a ‚â° (fmap-‚óá g ‚àò fmap-‚óá f at n) a
fmap-‚óá-‚àò {n = n} {zero , v} = refl
fmap-‚óá-‚àò {n = zero} {suc k , v} = refl
fmap-‚óá-‚àò {A} {B} {C} {n = suc n} {suc k , v} {g} {f}
    rewrite delay-plus {A} 1 k n
          | fmap-delay-‚àò {A} {B} {C} {n} {k} {g} {f} = refl

-- || Functoriality of ‚ñ°

-- Lifting of ‚ñ°
fmap-‚ñ° : {A B : œÑ} -> A ‚á¥ B -> ‚ñ° A ‚á¥ ‚ñ° B
fmap-‚ñ° f n a = Œª k ‚Üí f k (a k)

-- ‚ñ° preserves identities
fmap-‚ñ°-id : ‚àÄ{A : œÑ}
         -> fmap-‚ñ° id ‚â° id {‚ñ° A}
fmap-‚ñ°-id = refl

-- ‚ñ° preserves composition
fmap-‚ñ°-‚àò : ‚àÄ {A B C : œÑ} {g : B ‚á¥ C} {f : A ‚á¥ B}
        -> fmap-‚ñ° (g ‚àò f) ‚â° fmap-‚ñ° g ‚àò fmap-‚ñ° f
fmap-‚ñ°-‚àò = refl
-- Functor between two categories
record Functor (‚ÑÇ : Category) (ùîª : Category) : Set‚ÇÅ where
    private module ‚ÑÇ = Category ‚ÑÇ
    private module ùîª = Category ùîª
    field
        -- || Definitions
        -- Object map
        omap : obj ‚ÑÇ -> obj ùîª
        -- Arrow map
        fmap : ‚àÄ{A B : obj ‚ÑÇ} -> (A ‚ÑÇ.~> B) -> (omap A ùîª.~> omap B)

        -- || Laws
        -- Functor preseres identities
        fmap-id : ‚àÄ{A : obj ‚ÑÇ} -> fmap (‚ÑÇ.id {A}) ùîª.‚âà ùîª.id
        -- Functor preserves composition
        fmap-‚àò : ‚àÄ{A B C : obj ‚ÑÇ} {g : B ‚ÑÇ.~> C} {f : A ‚ÑÇ.~> B}
              -> fmap (g ‚ÑÇ.‚àò f) ùîª.‚âà fmap g ùîª.‚àò fmap f

-- Endofunctor on a category
record Endofunctor (‚ÑÇ : Category) (f : Functor ‚ÑÇ ‚ÑÇ): Set‚ÇÅ where
    functor : Functor ‚ÑÇ ‚ÑÇ
    functor = f

open Categories.Category {{...}}


-- || Functor and endofunctor instances for temporal operators

-- ‚ñπ instances
instance
    F-‚ñπ : Functor ‚Ñùeactive ‚Ñùeactive
    F-‚ñπ = record
        { omap = ‚ñπ_
        ; fmap = fmap-‚ñπ
        ; fmap-id = Œª {_ n a} -> fmap-‚ñπ-id {_} {n} {a}
        ; fmap-‚àò = Œª {_ _ _ _ _ n} -> fmap-‚ñπ-‚àò {n = n}
        }
        where
        -- Lifting of ‚ñπ
        fmap-‚ñπ : {A B : œÑ} -> A ‚á¥ B -> ‚ñπ A ‚á¥ ‚ñπ B
        fmap-‚ñπ f zero =  Œª _ ‚Üí top.tt
        fmap-‚ñπ f (suc n) = f n
        -- ‚ñπ preserves identities
        fmap-‚ñπ-id : ‚àÄ {A : œÑ} {n : ‚Ñï} {a : (‚ñπ A) n}
                 -> (fmap-‚ñπ (id {A}) at n) a ‚â° a
        fmap-‚ñπ-id {n = zero} = refl
        fmap-‚ñπ-id {n = suc n} = refl
        -- ‚ñπ preserves composition
        fmap-‚ñπ-‚àò : ‚àÄ {A B C : œÑ} {g : B ‚á¥ C} {f : A ‚á¥ B} {n : ‚Ñï} {a : (‚ñπ A) n}
                -> (fmap-‚ñπ (g ‚àò f) at n) a ‚â° (fmap-‚ñπ g ‚àò fmap-‚ñπ f at n) a
        fmap-‚ñπ-‚àò {n = zero} = refl
        fmap-‚ñπ-‚àò {n = suc n} = refl

    EF-‚ñπ : Endofunctor ‚Ñùeactive F-‚ñπ
    EF-‚ñπ = record {}

-- Delay instances
instance
    F-delay : ‚Ñï -> Functor ‚Ñùeactive ‚Ñùeactive
    F-delay k = record
        { omap = delay_by k
        ; fmap = fmap-delay k
        ; fmap-id = Œª {_ n a} -> fmap-delay-id k {_} {n} {a}
        ; fmap-‚àò = fmap-delay-‚àò k
        }
        where
        -- Lifting of delay
        fmap-delay : {A B : œÑ} -> (k : ‚Ñï) -> A ‚á¥ B -> delay A by k ‚á¥ delay B by k
        fmap-delay zero    f = f
        fmap-delay (suc k) f = Functor.fmap F-‚ñπ (fmap-delay k f)
        -- Delay preserves identities
        fmap-delay-id : ‚àÄ (k : ‚Ñï) {A : œÑ} {n : ‚Ñï} {a : (delay A by k) n}
                 -> (fmap-delay k (id {A}) at n) a ‚â° a
        fmap-delay-id zero = refl
        fmap-delay-id (suc k) {A} {zero} = refl
        fmap-delay-id (suc k) {A} {suc n} = fmap-delay-id k {A} {n}
        -- Delay preserves composition
        fmap-delay-‚àò : ‚àÄ (k : ‚Ñï) {A B C : œÑ} {g : B ‚á¥ C} {f : A ‚á¥ B} {n : ‚Ñï} {a : (delay A by k) n}
                -> (fmap-delay k (g ‚àò f) at n) a ‚â° (fmap-delay k g ‚àò fmap-delay k f at n) a
        fmap-delay-‚àò zero = refl
        fmap-delay-‚àò (suc k) {n = zero} = refl
        fmap-delay-‚àò (suc k) {n = suc n} = fmap-delay-‚àò k {n = n}

    EF-delay : (k : ‚Ñï) -> Endofunctor ‚Ñùeactive (F-delay k)
    EF-delay = Œª _ ‚Üí record {}


