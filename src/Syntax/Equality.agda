
-- Equality of terms
module Syntax.Equality where

open import Syntax.Types
open import Syntax.Context
open import Syntax.Terms
open import Syntax.Substitution.Kits
open import Syntax.Substitution.Instances
open import Syntax.Substitution.Lemmas

open Kit ùíØerm

-- Shorthands for de Bruijn indices
x‚ÇÅ : ‚àÄ{Œì A} -> Œì , A now ‚ä¢ A now
x‚ÇÅ = var top

x‚ÇÇ : ‚àÄ{Œì A B} -> Œì , A now , B ‚ä¢ A now
x‚ÇÇ = var (pop top)

x‚ÇÉ : ‚àÄ{Œì A B C} -> Œì , A now , B , C ‚ä¢ A now
x‚ÇÉ = var (pop (pop top))

x‚ÇÑ : ‚àÄ{Œì A B C D} -> Œì , A now , B , C , D ‚ä¢ A now
x‚ÇÑ = var (pop (pop (pop top)))

s‚ÇÅ : ‚àÄ{Œì A} -> Œì , A always ‚ä¢ A always
s‚ÇÅ = var top

s‚ÇÇ : ‚àÄ{Œì A B} -> Œì , A always , B ‚ä¢ A always
s‚ÇÇ = var (pop top)

s‚ÇÉ : ‚àÄ{Œì A B C} -> Œì , A always , B , C ‚ä¢ A always
s‚ÇÉ = var (pop (pop top))

s‚ÇÑ : ‚àÄ{Œì A B C D} -> Œì , A always , B , C , D ‚ä¢ A always
s‚ÇÑ = var (pop (pop (pop top)))


-- Œ≤-Œ∑ equality of terms
data Eq (Œì : Context) : (A : Judgement) -> Œì ‚ä¢ A -> Œì ‚ä¢ A -> Set
data Eq‚Ä≤ (Œì : Context) : (A : Judgement) -> Œì ‚ä® A -> Œì ‚ä® A -> Set
syntax Eq Œì A M N = Œì ‚ä¢ M ‚â° N ‚à∑ A
syntax Eq‚Ä≤ Œì A M N = Œì ‚ä® M ‚â° N ‚à∑ A

data Eq Œì where
    -- | Equivalence relation
    -- Reflexivity
    refl  : ‚àÄ{A}            ->               (M : Œì ‚ä¢ A)
                                           ---------------
                            ->              Œì ‚ä¢ M ‚â° M ‚à∑ A

    -- Symmetry
    sym   : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A}
                            ->              Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A
                                           -----------------
                            ->              Œì ‚ä¢ M‚ÇÇ ‚â° M‚ÇÅ ‚à∑ A

    -- Transitivity
    trans : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ M‚ÇÉ : Œì ‚ä¢ A}
                            ->   Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A   ->   Œì ‚ä¢ M‚ÇÇ ‚â° M‚ÇÉ ‚à∑ A
                                -----------------------------------------
                            ->               Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÉ ‚à∑ A

    -- | Œ≤-equality
    -- Œ≤-reduction for function application
    Œ≤-lam : ‚àÄ{A B}          ->  (N : Œì , A now ‚ä¢ B now)   (M : Œì ‚ä¢ A now)
                               -------------------------------------------
                            ->      Œì ‚ä¢ (lam N) $ M ‚â° [ M /] N ‚à∑ B now

    -- Œ≤-reduction for first projection

    Œ≤-fst : ‚àÄ{A B}          ->        (M : Œì ‚ä¢ A now)   (N : Œì ‚ä¢ B now)
                                     -----------------------------------
                            ->          Œì ‚ä¢ fst [ M ,, N ] ‚â° M ‚à∑ A now

    -- Œ≤-reduction for second projection
    Œ≤-snd : ‚àÄ{A B}          ->        (M : Œì ‚ä¢ A now)   (N : Œì ‚ä¢ B now)
                                     -----------------------------------
                            ->          Œì ‚ä¢ snd [ M ,, N ] ‚â° N ‚à∑ B now

    -- Œ≤-reduction for case split on first injection
    Œ≤-inl : ‚àÄ{A B C}        ->                    (M : Œì ‚ä¢ A now)
                                 (N‚ÇÅ : Œì , A now ‚ä¢ C now) (N‚ÇÇ : Œì , B now ‚ä¢ C now)
                                ---------------------------------------------------
                            ->       Œì ‚ä¢ case (inl M) inl‚Ü¶ N‚ÇÅ
                                                    ||inr‚Ü¶ N‚ÇÇ ‚â° [ M /] N‚ÇÅ ‚à∑ C now

    -- Œ≤-reduction for case split on first injection
    Œ≤-inr : ‚àÄ{A B C}        ->                    (M : Œì ‚ä¢ B now)
                                 (N‚ÇÅ : Œì , A now ‚ä¢ C now) (N‚ÇÇ : Œì , B now ‚ä¢ C now)
                                ---------------------------------------------------
                            ->       Œì ‚ä¢ case (inr M) inl‚Ü¶ N‚ÇÅ
                                                    ||inr‚Ü¶ N‚ÇÇ ‚â° [ M /] N‚ÇÇ ‚à∑ C now

    -- Œ≤-reduction for signal binding
    Œ≤-sig : ‚àÄ{A B}          ->  (N : Œì , A always ‚ä¢ B now)   (M : Œì ‚ä¢ A always)
                               --------------------------------------------------
                            ->     Œì ‚ä¢ letSig (sig M) In N ‚â° [ M /] N ‚à∑ B now

    -- | Œ∑-equality
    -- Œ∑-expansion for functions
    Œ∑-lam : ‚àÄ{A B}          ->              (M : Œì ‚ä¢ A => B now)
                                   --------------------------------------
                            ->      Œì ‚ä¢ M ‚â° lam (ùìå M $ x‚ÇÅ) ‚à∑ A => B now

    -- Œ∑-expansion for pairs
    Œ∑-pair : ‚àÄ{A B}         ->               (M : Œì ‚ä¢ A & B now)
                                   ----------------------------------------
                            ->      Œì ‚ä¢ M ‚â° [ fst M ,, snd M ] ‚à∑ A & B now

    -- Œ∑-expansion for unit
    Œ∑-unit :                                 (M : Œì ‚ä¢ Unit now)
                                          -------------------------
                            ->             Œì ‚ä¢ M ‚â° unit ‚à∑ Unit now

    -- Œ∑-expansion for sums
    Œ∑-sum : ‚àÄ{A B}          ->                (M : Œì ‚ä¢ A + B now)
                                    ------------------------------------------
                            ->        Œì ‚ä¢ M ‚â° case M inl‚Ü¶ inl x‚ÇÅ
                                                   ||inr‚Ü¶ inr x‚ÇÅ ‚à∑ A + B now

    -- Œ∑-expansion for signals
    Œ∑-sig : ‚àÄ{A}            ->                (M : Œì ‚ä¢ Signal A now)
                                    -------------------------------------------
                            ->       Œì ‚ä¢ M ‚â° letSig M In (sig s‚ÇÅ) ‚à∑ Signal A now

    -- Œ∑-expansion for events in computational terms
    Œ∑-evt : ‚àÄ{A}           ->                  (M : Œì ‚ä¢ Event A now)
                                  ----------------------------------------------------
                            ->     Œì ‚ä¢ M ‚â° event (letEvt M In pure x‚ÇÅ) ‚à∑ Event A now

    -- | Congruence rules
    -- Congruence in pairs
    cong-pair : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A now}{N‚ÇÅ N‚ÇÇ : Œì ‚ä¢ B now}
                            ->   Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A now  ->   Œì ‚ä¢ N‚ÇÅ ‚â° N‚ÇÇ ‚à∑ B now
                                ------------------------------------------------
                            ->    Œì ‚ä¢ [ M‚ÇÅ ,, N‚ÇÅ ] ‚â° [ M‚ÇÇ ,, N‚ÇÇ ] ‚à∑ A & B now

    -- Congruence in first projection
    cong-fst : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A & B now}
                            ->             Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A & B now
                                        ------------------------------
                            ->           Œì ‚ä¢ fst M‚ÇÅ ‚â° fst M‚ÇÇ ‚à∑ A now

    -- Congruence in second projection
    cong-snd : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A & B now}
                            ->             Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A & B now
                                        ------------------------------
                            ->           Œì ‚ä¢ snd M‚ÇÅ ‚â° snd M‚ÇÇ ‚à∑ B now

    -- Congruence in lambda body
    cong-lam : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì , A now ‚ä¢ B now}
                            ->            Œì , A now ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ B now
                                       ----------------------------------
                            ->          Œì ‚ä¢ lam M‚ÇÅ ‚â° lam M‚ÇÇ ‚à∑ A => B now

    -- Congruence in application
    cong-app : ‚àÄ{A B}{N‚ÇÅ N‚ÇÇ : Œì ‚ä¢ A => B now}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A now}
                            ->   Œì ‚ä¢ N‚ÇÅ ‚â° N‚ÇÇ ‚à∑ A => B now  ->  Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A now
                                ---------------------------------------------------
                            ->            Œì ‚ä¢ N‚ÇÅ $ M‚ÇÅ ‚â° N‚ÇÇ $ M‚ÇÇ ‚à∑ B now

    -- Congruence in case split
    cong-case : ‚àÄ{A B C}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A + B now}
                            ->               Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A + B now
                            ->   (N‚ÇÅ : Œì , A now ‚ä¢ C now) (N‚ÇÇ : Œì , B now ‚ä¢ C now)
                                ---------------------------------------------------
                            ->          Œì ‚ä¢ case M‚ÇÅ inl‚Ü¶ N‚ÇÅ ||inr‚Ü¶ N‚ÇÇ
                                          ‚â° case M‚ÇÇ inl‚Ü¶ N‚ÇÅ ||inr‚Ü¶ N‚ÇÇ ‚à∑ C now

    -- Congruence in first injection
    cong-inl : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A now}
                            ->              Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A now
                                      ------------------------------------
                            ->         Œì ‚ä¢ inl M‚ÇÅ ‚â° inl M‚ÇÇ ‚à∑ A + B now

    -- Congruence in second injection
    cong-inr : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ B now}
                            ->              Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ B now
                                      ------------------------------------
                            ->         Œì ‚ä¢ inr M‚ÇÅ ‚â° inr M‚ÇÇ ‚à∑ A + B now

    -- Congruence in signal constructor
    cong-sig : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A always}
                            ->              Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A always
                                      ------------------------------------
                            ->         Œì ‚ä¢ sig M‚ÇÅ ‚â° sig M‚ÇÇ ‚à∑ Signal A now

    -- Congruence in signal binding
    cong-letSig : ‚àÄ{A B}{S‚ÇÅ S‚ÇÇ : Œì ‚ä¢ Signal A now}
                            ->          Œì ‚ä¢ S‚ÇÅ ‚â° S‚ÇÇ ‚à∑ Signal A now
                            ->          (N : Œì , A always ‚ä¢ B now)
                                ---------------------------------------------
                            ->   Œì ‚ä¢ letSig S‚ÇÅ In N ‚â° letSig S‚ÇÇ In N ‚à∑ B now

    -- Congruence in sampling
    cong-sample : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A always}
                            ->              Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A always
                                      -------------------------------------
                            ->         Œì ‚ä¢ sample M‚ÇÅ ‚â° sample M‚ÇÇ ‚à∑ A now

    -- Congruence in stabilisation
    cong-stable : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ : Œì À¢ ‚ä¢ A now}
                            ->                 Œì À¢ ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A now
                                      -------------------------------------
                            ->         Œì ‚ä¢ stable M‚ÇÅ ‚â° stable M‚ÇÇ ‚à∑ A always

    -- Congruence in events
    cong-event : ‚àÄ{A}{E‚ÇÅ E‚ÇÇ : Œì ‚ä® A now}
                            ->                 Œì ‚ä® E‚ÇÅ ‚â° E‚ÇÇ ‚à∑ A now
                                      -------------------------------------
                            ->         Œì ‚ä¢ event E‚ÇÅ ‚â° event E‚ÇÇ ‚à∑ Event A now

data Eq‚Ä≤ (Œì : Context) where
    -- | Equivalence relation
    -- Reflexivity
    refl  : ‚àÄ{A}            ->                (M : Œì ‚ä® A)
                                            ---------------
                            ->               Œì ‚ä® M ‚â° M ‚à∑ A

    -- Symmetry
    sym   : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ : Œì ‚ä® A}
                            ->              Œì ‚ä® M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A
                                           -----------------
                            ->              Œì ‚ä® M‚ÇÇ ‚â° M‚ÇÅ ‚à∑ A

    -- Transitivity
    trans : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ M‚ÇÉ : Œì ‚ä® A}
                            ->   Œì ‚ä® M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A   ->   Œì ‚ä® M‚ÇÇ ‚â° M‚ÇÉ ‚à∑ A
                                -----------------------------------------
                            ->               Œì ‚ä® M‚ÇÅ ‚â° M‚ÇÉ ‚à∑ A

    -- | Œ≤-equality
    -- Œ≤-reduction for signal binding in computational terms
    Œ≤-sig‚Ä≤ : ‚àÄ{A B}         ->  (C : Œì , A always ‚ä® B now)   (M : Œì ‚ä¢ A always)
                               --------------------------------------------------
                            ->     Œì ‚ä® letSig (sig M) InC C ‚â° [ M /‚Ä≤] C ‚à∑ B now

    -- Œ≤-reduction for event binding in computational terms
    Œ≤-evt‚Ä≤ : ‚àÄ{A B}         ->     (C : Œì À¢ , A now ‚ä® B now)   (D : Œì ‚ä® A now)
                                 ---------------------------------------------
                            ->    Œì ‚ä® letEvt (event D) In C ‚â° ‚ü® D /‚ü© C ‚à∑ B now

    -- Œ≤-reduction for event binding in computational terms
    Œ≤-select‚Çö : ‚àÄ{A B C}    ->      (C‚ÇÅ : Œì À¢ , A now , Event B now ‚ä® C now)
                                    (C‚ÇÇ : Œì À¢ , Event A now , B now ‚ä® C now)
                                       (C‚ÇÉ : Œì À¢ , A now , B now ‚ä® C now)
                                      (M‚ÇÅ : Œì ‚ä¢ A now)   (M‚ÇÇ : Œì ‚ä¢ B now)
                                 ---------------------------------------------
                            ->    Œì ‚ä® select event (pure M‚ÇÅ) ‚Ü¶ C‚ÇÅ
                                          || event (pure M‚ÇÇ) ‚Ü¶ C‚ÇÇ
                                          ||both‚Ü¶ C‚ÇÉ
                                    ‚â° [ M‚ÇÅ /‚Ä≤] ([ ùìå M‚ÇÇ /‚Ä≤]
                                        (weakening‚Ä≤ (keep (keep (ŒìÀ¢‚äÜŒì Œì))) C‚ÇÉ)) ‚à∑ C now

    -- | Œ∑-equality
    -- Œ∑-expansion for signals in computational terms
    Œ∑-sig‚Ä≤ : ‚àÄ{A}           ->                  (M : Œì ‚ä¢ Signal A now)
                               --------------------------------------------------------
                            ->  Œì ‚ä® pure M ‚â° letSig M InC (pure (sig s‚ÇÅ)) ‚à∑ Signal A now

    -- | Congruence rules
    -- Congruence in pure computational term
    cong-pure‚Ä≤ : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A}
                            ->                Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A
                                         ---------------------------
                            ->            Œì ‚ä® pure M‚ÇÅ ‚â° pure M‚ÇÇ ‚à∑ A

    -- Congruence in signal binding
    cong-letSig‚Ä≤ : ‚àÄ{A B}{S‚ÇÅ S‚ÇÇ : Œì ‚ä¢ Signal A now}
                            ->            Œì ‚ä¢ S‚ÇÅ ‚â° S‚ÇÇ ‚à∑ Signal A now
                            ->            (N : Œì , A always ‚ä® B now)
                                -----------------------------------------------
                            ->   Œì ‚ä® letSig S‚ÇÅ InC N ‚â° letSig S‚ÇÇ InC N ‚à∑ B now

    -- Congruence in event binding
    cong-letEvt‚Ä≤ : ‚àÄ{A B}{E‚ÇÅ E‚ÇÇ : Œì ‚ä¢ Event A now}
                            ->            Œì ‚ä¢ E‚ÇÅ ‚â° E‚ÇÇ ‚à∑ Event A now
                            ->            (D : Œì À¢ , A now ‚ä® B now)
                                -----------------------------------------------
                            ->   Œì ‚ä® letEvt E‚ÇÅ In D ‚â° letEvt E‚ÇÇ In D ‚à∑ B now

test : ‚àÄ{A} -> ‚àô ‚ä¢ (Signal A => A) now
test = lam (letSig x‚ÇÅ In sample s‚ÇÅ)

tes : ‚àÄ{A} -> ‚àô ‚ä¢ (Signal A => Signal (Signal A)) now
tes = lam (letSig x‚ÇÅ In sig (stable (sig s‚ÇÅ)))

te : ‚àÄ{A} -> ‚àô ‚ä¢ (A => Event A) now
te = lam (event (pure x‚ÇÅ))

t2 : ‚àÄ{A} -> ‚àô ‚ä¢ (Signal A) now -> ‚àô ‚ä¢ A always
t2 M = stable (letSig M In sample s‚ÇÅ)

t : ‚àÄ{A} -> ‚àô ‚ä¢ (Event (Event A) => Event A) now
t = lam (event (letEvt x‚ÇÅ In (letEvt x‚ÇÅ In pure x‚ÇÅ)))

t3 : ‚àÄ{A B} -> ‚àô ‚ä¢ (Event A => Signal (A => Event B) => Event B) now
t3 = lam (lam
        (letSig x‚ÇÅ In (event
        (letEvt x‚ÇÉ In
        (letEvt (sample s‚ÇÇ $ x‚ÇÅ) In pure x‚ÇÅ)))))

-- t4 : ‚àÄ{A B C} -> ‚àô ‚ä¢ (Event A => Event B => Signal (A => Event C) => Signal (B => Event C) => Event C) now
-- t4 = lam (lam (lam (lam (
--         letSig x‚ÇÇ In (
--         letSig x‚ÇÇ In (event (
--             select (var (pop (pop (pop (pop (pop top)))))) ‚Ü¶ letEvt sample s‚ÇÑ $ x‚ÇÅ In pure x‚ÇÅ
--                 || (var (pop (pop (pop (pop top))))) ‚Ü¶ letEvt (sample s‚ÇÉ $ x‚ÇÅ) In pure x‚ÇÅ
--                 ||both‚Ü¶ {!   !})))))))

t5 : ‚àÄ{A B} -> ‚àô , Signal A now , Event (A => B) now ‚ä® B now
t5 = letSig (var (pop top)) InC (letEvt (var (pop top)) In pure (x‚ÇÅ $ sample s‚ÇÇ))

t6 : ‚àÄ{A B} -> ‚àô , Event (Signal A) now , Signal B now ‚ä¢ Event (Signal (A & B)) now
t6 = event (letSig x‚ÇÅ InC (letEvt x‚ÇÉ In (pure (letSig x‚ÇÅ In (sig (stable [ sample s‚ÇÅ ,, sample s‚ÇÇ ]))))))
-- t6 = event (letSig x‚ÇÅ InC (letEvt x‚ÇÉ In (letSig x‚ÇÅ InC (pure [ sample s‚ÇÅ ,, sample s‚ÇÉ ]))))

too : ‚àÄ{A B} -> ‚àô ‚ä¢ Signal (A => B) => (Event A => Event B) now
too = lam (lam (letSig x‚ÇÇ In event (letEvt x‚ÇÇ In pure (sample s‚ÇÇ $ x‚ÇÅ))))
