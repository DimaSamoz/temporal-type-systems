
-- Equality of terms
module Syntax.Equality where

open import Syntax.Types
open import Syntax.Context
open import Syntax.Terms
open import Syntax.Kit
open import Syntax.Traversal

open Kit ùíØerm

-- Shorthands for de Bruijn indices
x‚ÇÅ : ‚àÄ{Œì A} -> Œì , A now ‚ä¢ A now
x‚ÇÅ = var top

x‚ÇÇ : ‚àÄ{Œì A B} -> Œì , A now , B ‚ä¢ A now
x‚ÇÇ = var (pop top)

x‚ÇÉ : ‚àÄ{Œì A B C} -> Œì , A now , B , C ‚ä¢ A now
x‚ÇÉ = var (pop (pop top))

s‚ÇÅ : ‚àÄ{Œì A} -> Œì , A always ‚ä¢ A always
s‚ÇÅ = svar top

s‚ÇÇ : ‚àÄ{Œì A B} -> Œì , A always , B ‚ä¢ A always
s‚ÇÇ = svar (pop top)

s‚ÇÉ : ‚àÄ{Œì A B C} -> Œì , A always , B , C ‚ä¢ A always
s‚ÇÉ = svar (pop (pop top))


-- Œ≤-Œ∑ equality of terms
data Eq (Œì : Context) : (A : Judgement) -> Œì ‚ä¢ A -> (Œì ‚ä¢ A) -> Set
syntax Eq Œì A M N = Œì ‚ä¢ M ‚â° N ‚à∑ A
data Eq Œì where
    -- | Equivalence relation
    -- Reflexivity
    refl  : ‚àÄ{A}            ->            (M : Œì ‚ä¢ A)
                                        ---------------
                            ->           Œì ‚ä¢ M ‚â° M ‚à∑ A

    -- Symmetry
    sym   : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A}
                            ->   Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A
                                -----------------
                            ->   Œì ‚ä¢ M‚ÇÇ ‚â° M‚ÇÅ ‚à∑ A

    -- Transitivity
    trans : ‚àÄ{A}{M‚ÇÅ M‚ÇÇ M‚ÇÉ : Œì ‚ä¢ A}
                            ->   Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A   ->   Œì ‚ä¢ M‚ÇÇ ‚â° M‚ÇÉ ‚à∑ A
                                -----------------------------------------
                            ->               Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÉ ‚à∑ A

    -- | Œ≤-equality
    -- Œ≤-reduction for function application
    Œ≤-lam : ‚àÄ{A B}          ->  (N : Œì , A now ‚ä¢ B now)   (M : Œì ‚ä¢ A now)
                               -------------------------------------------
                            ->      Œì ‚ä¢ lam N $ M ‚â° [ M /] N ‚à∑ B now


    -- Œ≤-reduction for first projection

    Œ≤-fst : ‚àÄ{A B}          ->        (M : Œì ‚ä¢ A now)   (N : Œì ‚ä¢ B now)
                                     -----------------------------------
                            ->          Œì ‚ä¢ fst [ M ,, N ] ‚â° M ‚à∑ A now

    -- Œ≤-reduction for second projection
    Œ≤-snd : ‚àÄ{A B}          ->        (M : Œì ‚ä¢ A now)   (N : Œì ‚ä¢ B now)
                                     -----------------------------------
                            ->          Œì ‚ä¢ snd [ M ,, N ] ‚â° N ‚à∑ B now

    -- | Œ∑-equality
    -- Œ∑-expansion for functions
    Œ∑-lam : ‚àÄ{A B}          ->              (M : Œì ‚ä¢ A => B now)
                                   --------------------------------------
                            ->      Œì ‚ä¢ M ‚â° lam (ùìå M $ x‚ÇÅ) ‚à∑ A => B now

    -- Œ∑-expansion for pairs
    Œ∑-pair : ‚àÄ{A B}         ->               (M : Œì ‚ä¢ A & B now)
                                   ----------------------------------------
                            ->      Œì ‚ä¢ M ‚â° [ fst M ,, snd M ] ‚à∑ A & B now

    -- Œ∑-expansion for unit
    Œ∑-unit :                                 (M : Œì ‚ä¢ Unit now)
                                          -------------------------
                            ->             Œì ‚ä¢ M ‚â° unit ‚à∑ Unit now

    -- | Congruence rules
    -- Congruence in pairs
    cong-pair : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A now}{N‚ÇÅ N‚ÇÇ : Œì ‚ä¢ B now}
                            ->   Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A now  ->   Œì ‚ä¢ N‚ÇÅ ‚â° N‚ÇÇ ‚à∑ B now
                                ------------------------------------------------
                            ->    Œì ‚ä¢ [ M‚ÇÅ ,, N‚ÇÅ ] ‚â° [ M‚ÇÇ ,, N‚ÇÇ ] ‚à∑ A & B now

    -- Congruence in first projection
    cong-fst : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A & B now}
                            ->             Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A & B now
                                        ------------------------------
                            ->           Œì ‚ä¢ fst M‚ÇÅ ‚â° fst M‚ÇÇ ‚à∑ A now

    -- Congruence in second projection
    cong-snd : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A & B now}
                            ->             Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A & B now
                                        ------------------------------
                            ->           Œì ‚ä¢ snd M‚ÇÅ ‚â° snd M‚ÇÇ ‚à∑ B now

    -- Congruence in lambda body
    cong-lam : ‚àÄ{A B}{M‚ÇÅ M‚ÇÇ : Œì , A now ‚ä¢ B now}
                            ->            Œì , A now ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ B now
                                       ----------------------------------
                            ->          Œì ‚ä¢ lam M‚ÇÅ ‚â° lam M‚ÇÇ ‚à∑ A => B now

    -- Congruence in application
    cong-app : ‚àÄ{A B}{N‚ÇÅ N‚ÇÇ : Œì ‚ä¢ A => B now}{M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ A now}
                            ->   Œì ‚ä¢ N‚ÇÅ ‚â° N‚ÇÇ ‚à∑ A => B now  ->  Œì ‚ä¢ M‚ÇÅ ‚â° M‚ÇÇ ‚à∑ A now
                                ---------------------------------------------------
                            ->            Œì ‚ä¢ N‚ÇÅ $ M‚ÇÅ ‚â° N‚ÇÇ $ M‚ÇÇ ‚à∑ B now
